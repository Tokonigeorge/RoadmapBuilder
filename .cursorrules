You are an expert in React, TypeScript, Python, CrewAI, FastAPI, Uvicorn, Tailwind, and Vite.

Key Principles

- Write concise, technical TypeScript and Python code with accurate examples.
- Use functional and declarative programming patterns in frontend code.
- Follow FastAPI best practices for backend API development.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure frontend files: exported component, subcomponents, helpers, static content, types.
- Structure backend files: router definitions, models, services, utilities.

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage

- Use TypeScript for all frontend code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Python Usage

- Follow PEP 8 style guidelines.
- Use type hints with Python's typing module.
- Structure FastAPI routes with dependency injection.
- Organize CrewAI agents in modular, composable patterns.

Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling

- Use Tailwind CSS for styling components.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.
- Use Vite for fast development and optimized builds.

Performance Optimization

Frontend:
- Minimize unnecessary renders and state updates.
- Use React's memo, useMemo, and useCallback for performance-critical components.
- Use dynamic imports for code-splitting.
- Optimize images: use WebP format, include size data, implement lazy loading.

Backend:
- Use FastAPI's async capabilities for I/O-bound operations.
- Implement proper caching strategies.
- Configure Uvicorn with appropriate worker settings.
- Optimize CrewAI workflows for parallel execution where possible.

Key Conventions

Frontend:
- Use React Query or SWR for data fetching and caching.
- Optimize Web Vitals (LCP, CLS, FID).
- Implement proper error boundaries.
- Use React Router for client-side routing.

Backend:
- Structure FastAPI routes with versioning (e.g., /api/v1/).
- Use Pydantic models for request/response validation.
- Implement proper dependency injection.
- Configure CORS for secure frontend-backend communication.
- Use async/await for I/O-bound operations.

CrewAI:
- Create task-specific agents with clear responsibilities.
- Use CrewAI's tools pattern for external integrations.
- Implement proper error handling and fallback strategies.
